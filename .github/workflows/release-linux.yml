name: Build and Publish Linux Artifacts

on:
  push:
    branches:
      - release/*
      - v*-mod
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-latest

    env:
      RELEASE_BASENAME: solana-release
      TARBALL_BASENAME: solana-release
      SOLANA_DOWNLOAD_ROOT: https://github.com/gabrielhicks/jito-solana/releases/download

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: 'recursive'

      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libssl-dev \
            libudev-dev \
            pkg-config \
            zlib1g-dev \
            llvm \
            clang \
            cmake \
            make \
            libprotobuf-dev \
            protobuf-compiler
          # Verify tools
          for tool in cargo tar bzip2 jq; do
            if ! command -v $tool >/dev/null; then
              echo "$tool is missing. Exiting..."
              exit 1
            fi
          done

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Verify Rust Installation
        run: |
          rustc --version || { echo "Rust not installed"; exit 1; }
          cargo --version || { echo "Cargo not installed"; exit 1; }

      - name: Determine Build Target
        run: |
          echo "target=x86_64-unknown-linux-gnu" >> $GITHUB_ENV
          echo "Build target: ${{ env.target }}"

      - name: Build Project
        run: |
          mkdir -p $RELEASE_BASENAME
          echo "channel: ${{ github.ref_name }}" > $RELEASE_BASENAME/version.yml
          echo "commit: $(git rev-parse HEAD)" >> $RELEASE_BASENAME/version.yml
          echo "target: ${{ env.target }}" >> $RELEASE_BASENAME/version.yml

          # Build binaries
          cargo build --release || { echo "Cargo build failed"; exit 1; }

          # Verify binary exists
          if [ ! -f target/release/agave-install-init ]; then
            echo "Build artifact agave-install-init is missing!"
            exit 1
          fi

          # Package binaries
          mkdir -p $RELEASE_BASENAME/bin
          cp target/release/agave-install-init $RELEASE_BASENAME/bin/agave-install-init-${{ env.target }}
          tar cvf $TARBALL_BASENAME-${{ env.target }}.tar $RELEASE_BASENAME
          bzip2 $TARBALL_BASENAME-${{ env.target }}.tar

      - name: Package SBF SDK
        run: |
          mkdir -p sdk/sbf
          echo "Packaging SBF SDK..."
          tar cvjf sbf-sdk.tar.bz2 -C sdk sbf
          # Verify SBF SDK
          if [ ! -f sbf-sdk.tar.bz2 ]; then
            echo "SBF SDK tarball missing!"
            exit 1
          fi

      - name: Fetch Latest Release
        id: get_latest_release
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/releases/tags/${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Upload URL
        run: |
          UPLOAD_URL=$(echo '${{ steps.get_latest_release.outputs.data }}' | jq -r '.upload_url' | sed 's/{?name,label}//')
          echo "UPLOAD_URL=${UPLOAD_URL}" >> $GITHUB_ENV
          if [ -z "$UPLOAD_URL" ]; then
            echo "Failed to retrieve upload URL"
            exit 1
          fi

      - name: Verify Files Before Upload
        run: |
          for file in $TARBALL_BASENAME-${{ env.target }}.tar.bz2 sbf-sdk.tar.bz2; do
            if [ ! -f $file ]; then
              echo "File $file is missing!"
              exit 1
            fi
          done

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts-linux
          path: |
            $TARBALL_BASENAME-${{ env.target }}.tar.bz2
            $RELEASE_BASENAME/version.yml
            $RELEASE_BASENAME/bin/agave-install-init-${{ env.target }}

      - name: Upload SBF SDK
        uses: actions/upload-artifact@v3
        with:
          name: sbf-sdk-linux
          path: sbf-sdk.tar.bz2

      - name: Upload Release Tarball
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: $TARBALL_BASENAME-${{ env.target }}.tar.bz2
          asset_name: $TARBALL_BASENAME-${{ env.target }}.tar.bz2
          asset_content_type: application/x-bzip2

      - name: Upload SBF SDK
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: sbf-sdk.tar.bz2
          asset_name: sbf-sdk.tar.bz2
          asset_content_type: application/x-bzip2
