name: Build and Publish Linux Artifacts

on:
  push:
    branches:
      - release/*
      - v*-mod
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-latest

    env:
      RELEASE_BASENAME: solana-release
      TARBALL_BASENAME: solana-release
      SOLANA_DOWNLOAD_ROOT: https://github.com/gabrielhicks/jito-solana/releases/download

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive

      # Cache Cargo dependencies
      - name: Cache Cargo Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo
            target
          key: cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-${{ runner.os }}-

      # Cache system dependencies
      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libssl-dev libudev-dev pkg-config zlib1g-dev llvm clang \
            cmake make libprotobuf-dev protobuf-compiler

      # Restore state
      - name: Check Build State
        id: check_state
        uses: actions/download-artifact@v3
        with:
          name: build-success-linux
        continue-on-error: true

      - name: Skip Build If Successful
        if: steps.check_state.outcome == 'success'
        run: |
          echo "Build already completed. Skipping..."
          exit 0

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build Project
        run: |
          mkdir -p ${{ env.RELEASE_BASENAME }}
          echo "channel: ${{ github.ref_name }}" > ${{ env.RELEASE_BASENAME }}/version.yml
          echo "commit: $(git rev-parse HEAD)" >> ${{ env.RELEASE_BASENAME }}/version.yml
          echo "target: x86_64-unknown-linux-gnu" >> ${{ env.RELEASE_BASENAME }}/version.yml

          echo "Building project with cargo..."
          cargo build --release

          BINARY_PATH="target/release/agave-install-init"
          if [ ! -f "$BINARY_PATH" ]; then
            echo "Build artifact $BINARY_PATH is missing!"
            exit 1
          fi

          mkdir -p ${{ env.RELEASE_BASENAME }}/bin
          cp "$BINARY_PATH" ${{ env.RELEASE_BASENAME }}/bin/agave-install-init-x86_64-unknown-linux-gnu
          tar -cvf ${{ env.TARBALL_BASENAME }}-x86_64-unknown-linux-gnu.tar ${{ env.RELEASE_BASENAME }}
          bzip2 ${{ env.TARBALL_BASENAME }}-x86_64-unknown-linux-gnu.tar

      - name: Save Build State
        run: echo "Build completed successfully!" > build-success.txt
      - uses: actions/upload-artifact@v3
        with:
          name: build-success-linux
          path: build-success.txt

      - name: Package SBF SDK
        run: |
          echo "Packaging SBF SDK..."
          mkdir -p ${{ env.RELEASE_BASENAME }}/sdk
          tar -cvjf ${{ env.RELEASE_BASENAME }}/sdk/sbf-sdk.tar.bz2 -C sdk sbf

          # Verify the SBF SDK tarball exists
          if [ ! -f "${{ env.RELEASE_BASENAME }}/sdk/sbf-sdk.tar.bz2" ]; then
            echo "SBF SDK tarball is missing!"
            exit 1
          fi
          echo "SBF SDK tarball created: ${{ env.RELEASE_BASENAME }}/sdk/sbf-sdk.tar.bz2"

      # Upload artifacts
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts-linux
          path: |
            ${{ env.TARBALL_BASENAME }}-x86_64-unknown-linux-gnu.tar.bz2
            ${{ env.RELEASE_BASENAME }}/version.yml
            ${{ env.RELEASE_BASENAME }}/bin/agave-install-init-x86_64-unknown-linux-gnu

      # Upload SBF SDK Artifact
      - name: Upload SBF SDK Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: sbf-sdk-linux
          path: ${{ env.RELEASE_BASENAME }}/sdk/sbf-sdk.tar.bz2

      # Fetch Latest Release
      - name: Fetch Latest Release
        id: get_latest_release
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/releases/latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Extract Upload URL
      - name: Extract Upload URL
        run: |
          UPLOAD_URL=$(echo '${{ steps.get_latest_release.outputs.data }}' | jq -r '.upload_url' | sed 's/{?name,label}//')
          echo "UPLOAD_URL=${UPLOAD_URL}" >> $GITHUB_ENV

      # Verify Tarball Before Upload
      - name: Verify Release Tarball
        run: |
          TARBALL="${{ env.TARBALL_BASENAME }}-x86_64-unknown-linux-gnu.tar.bz2"
          if [ ! -f "$TARBALL" ]; then
            echo "Tarball $TARBALL does not exist!"
            exit 1
          fi
          echo "Tarball exists: $TARBALL"

      # Upload Release Tarball
      - name: Upload Release Tarball
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ${{ env.TARBALL_BASENAME }}-x86_64-unknown-linux-gnu.tar.bz2
          asset_name: ${{ env.TARBALL_BASENAME }}-x86_64-unknown-linux-gnu.tar.bz2
          asset_content_type: application/x-bzip2

      # Upload SBF SDK Release Asset
      - name: Upload SBF SDK Tarball
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ${{ env.RELEASE_BASENAME }}/sdk/sbf-sdk.tar.bz2
          asset_name: sbf-sdk-${{ env.target }}-${{ github.ref_name }}.tar.bz2
          asset_content_type: application/x-bzip2
