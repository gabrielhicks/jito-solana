name: Build and Publish Linux Artifacts

on:
  push:
    branches:
      - release/*
      - v*-mod
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-latest

    env:
      RELEASE_BASENAME: solana-release
      TARBALL_BASENAME: solana-release
      SOLANA_DOWNLOAD_ROOT: https://github.com/gabrielhicks/jito-solana/releases/download

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive

      # Cache Cargo dependencies
      - name: Cache Cargo Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo
            target
          key: cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-${{ runner.os }}-

      # Cache system dependencies
      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libssl-dev libudev-dev pkg-config zlib1g-dev llvm clang \
            cmake make libprotobuf-dev protobuf-compiler

      # Restore state
      - name: Check Build State
        id: check_state
        uses: actions/download-artifact@v3
        with:
          name: build-success-linux
        continue-on-error: true

      - name: Skip Build If Successful
        if: steps.check_state.outcome == 'success'
        run: |
          echo "Build already completed. Skipping..."
          exit 0

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build Project
        run: |
          mkdir -p ${{ env.RELEASE_BASENAME }}
          echo "channel: ${{ github.ref_name }}" > ${{ env.RELEASE_BASENAME }}/version.yml
          echo "commit: $(git rev-parse HEAD)" >> ${{ env.RELEASE_BASENAME }}/version.yml
          echo "target: ${{ env.target }}" >> ${{ env.RELEASE_BASENAME }}/version.yml

          echo "Building project with cargo..."
          cargo build --release

          BINARY_PATH="target/release/agave-install-init"
          if [ ! -f "$BINARY_PATH" ]; then
            echo "Build artifact $BINARY_PATH is missing!"
            exit 1
          fi

          mkdir -p ${{ env.RELEASE_BASENAME }}/bin
          cp "$BINARY_PATH" ${{ env.RELEASE_BASENAME }}/bin/agave-install-init-${{ env.target }}
          tar -cvf ${{ env.TARBALL_BASENAME }}-${{ env.target }}.tar ${{ env.RELEASE_BASENAME }}
          bzip2 ${{ env.TARBALL_BASENAME }}-${{ env.target }}.tar

      - name: Save Build State
        run: echo "Build completed successfully!" > build-success.txt
      - uses: actions/upload-artifact@v3
        with:
          name: build-success-linux
          path: build-success.txt

      # Upload artifacts
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts-linux
          path: |
            ${{ env.TARBALL_BASENAME }}-${{ env.target }}.tar.bz2
            ${{ env.RELEASE_BASENAME }}/version.yml
            ${{ env.RELEASE_BASENAME }}/bin/agave-install-init-${{ env.target }}