name: Windows Release Artifacts

on:
  push:
    branches:
      - release/*
      - v*-mod
  workflow_dispatch:

jobs:
  windows-build:
    runs-on: windows-2022
    steps:
      # Checkout Code
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0
          submodules: recursive

      # Install Rust
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      # Prepare Environment Variables
      - name: Prepare Environment
        shell: bash
        run: |
          echo "RELEASE_BASENAME=solana-release" >> $GITHUB_ENV
          echo "TARBALL_BASENAME=solana-release" >> $GITHUB_ENV
          echo "CI_OS_NAME=windows" >> $GITHUB_ENV
          echo "TARGET=x86_64-pc-windows-msvc" >> $GITHUB_ENV
          echo "CHANNEL_OR_TAG=${{ github.ref_name }}" >> $GITHUB_ENV
          echo "COMMIT=$(git rev-parse HEAD)" >> $GITHUB_ENV

      # Verify Environment Variables
      - name: Verify Environment Variables
        shell: bash
        run: |
          echo "RELEASE_BASENAME: $RELEASE_BASENAME"
          echo "TARBALL_BASENAME: $TARBALL_BASENAME"
          echo "TARGET: $TARGET"
          echo "CHANNEL_OR_TAG: $CHANNEL_OR_TAG"
          echo "COMMIT: $COMMIT"

      # Install Dependencies
      - name: Install Dependencies
        run: |
          choco install protoc jq
          vcpkg install openssl:x64-windows-static-md
          vcpkg integrate install

      - name: Install Strawberry Perl (Windows)
        if: matrix.os == 'windows-2022'
        run: |
          choco install strawberryperl
          perl -MCPAN -e "install Locale::Maketext::Simple"

      - name: Verify Perl Installation
        if: matrix.os == 'windows-2022'
        run: |
          perl --version
          perl -e "use Locale::Maketext::Simple; print 'Perl is ready with required modules\n';"

      # Build Project
      - name: Build Project
        shell: bash
        run: |
          # Prepare the release directory
          mkdir -p $RELEASE_BASENAME
          echo "channel: $CHANNEL_OR_TAG" > $RELEASE_BASENAME/version.yml
          echo "commit: $COMMIT" >> $RELEASE_BASENAME/version.yml
          echo "target: $TARGET" >> $RELEASE_BASENAME/version.yml

          # Build binaries
          cargo build --release

          # Copy binaries to the release directory
          mkdir -p $RELEASE_BASENAME/bin
          cp target/release/agave-install-init $RELEASE_BASENAME/bin/agave-install-init-$TARGET

          # Create tarball
          tar -cvf $TARBALL_BASENAME-$TARGET.tar $RELEASE_BASENAME
          bzip2 $TARBALL_BASENAME-$TARGET.tar

      # Fetch the Latest Release
      - name: Fetch Latest Release
        id: get_latest_release
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/releases/latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Extract Upload URL
      - name: Extract Upload URL
        run: |
          UPLOAD_URL=$(echo '${{ steps.get_latest_release.outputs.data }}' | jq -r '.upload_url' | sed 's/{?name,label}//')
          echo "UPLOAD_URL=${UPLOAD_URL}" >> $GITHUB_ENV

      # Upload Windows Build Artifacts
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: windows-artifacts
          path: |
            $TARBALL_BASENAME-${{ env.TARGET }}.tar.bz2
            $RELEASE_BASENAME/version.yml
            $RELEASE_BASENAME/bin/agave-install-init-${{ env.TARGET }}

      # Upload Windows Release Assets
      - name: Upload Windows Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: $TARBALL_BASENAME-${{ env.TARGET }}.tar.bz2
          asset_name: $TARBALL_BASENAME-${{ env.TARGET }}.tar.bz2
          asset_content_type: application/x-bzip2
