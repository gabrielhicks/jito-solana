name: Build and Publish Windows

on:
  push:
    branches:
      - release/*
      - v*-mod
  workflow_dispatch:

jobs:
  windows-build:
    runs-on: windows-2022
    steps:
      # Checkout Code
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0
          submodules: recursive

      # Install Rust
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Verify Rust Installation
        shell: bash
        run: |
          rustc --version || { echo "Rust installation failed!"; exit 1; }
          cargo --version || { echo "Cargo installation failed!"; exit 1; }

      # Prepare Environment Variables
      - name: Prepare Environment
        shell: bash
        run: |
          set -e
          echo "RELEASE_BASENAME=solana-release" >> $GITHUB_ENV
          echo "TARBALL_BASENAME=solana-release" >> $GITHUB_ENV
          echo "CI_OS_NAME=windows" >> $GITHUB_ENV
          echo "TARGET=x86_64-pc-windows-msvc" >> $GITHUB_ENV
          echo "CHANNEL_OR_TAG=${{ github.ref_name }}" >> $GITHUB_ENV
          echo "COMMIT=$(git rev-parse HEAD)" >> $GITHUB_ENV

      # Verify Environment Variables
      - name: Verify Environment Variables
        shell: bash
        run: |
          echo "RELEASE_BASENAME: ${{ env.RELEASE_BASENAME }}"
          echo "TARBALL_BASENAME: ${{ env.TARBALL_BASENAME }}"
          echo "TARGET: ${{ env.TARGET }}"
          echo "CHANNEL_OR_TAG: ${{ env.CHANNEL_OR_TAG }}"
          echo "COMMIT: ${{ env.COMMIT }}"
          if [ -z "${{ env.TARGET }}" ]; then 
            echo "TARGET is unset!"; 
            exit 1; 
          fi

      # Install Dependencies
      - name: Install Dependencies
        shell: bash
        run: |
          choco install protoc jq || { echo "Failed to install dependencies via Chocolatey"; exit 1; }
          vcpkg install openssl:x64-windows-static-md || { echo "Failed to install openssl"; exit 1; }
          vcpkg integrate install

      # Install Perl and Dependencies
      - name: Install Strawberry Perl and Dependencies
        run: |
          choco install strawberryperl
          perl -MCPAN -e "install Locale::Maketext::Simple" || { echo "Perl module installation failed!"; exit 1; }

      - name: Verify Perl Installation
        run: |
          perl --version || { echo "Perl is not installed correctly"; exit 1; }
          perl -e "use Locale::Maketext::Simple; print 'Perl with required modules is ready.\n';"

      # Build Project
      - name: Build Project
        shell: bash
        run: |
          set -e
          echo "Preparing release directory..."
          export PERL="C:/Strawberry/perl/bin/perl.exe"
          mkdir -p ${{ env.RELEASE_BASENAME }}/bin

          echo "channel: ${{ env.CHANNEL_OR_TAG }}" > ${{ env.RELEASE_BASENAME }}/version.yml
          echo "commit: ${{ env.COMMIT }}" >> ${{ env.RELEASE_BASENAME }}/version.yml
          echo "target: ${{ env.TARGET }}" >> ${{ env.RELEASE_BASENAME }}/version.yml

          echo "Building project with cargo..."
          cargo build --release || { echo "Cargo build failed!"; exit 1; }

          BINARY_PATH="target/release/agave-install-init.exe"
          if [ ! -f "$BINARY_PATH" ]; then
            echo "Build artifact $BINARY_PATH is missing! Exiting."
            exit 1
          fi

          echo "Copying binary to release directory..."
          cp "$BINARY_PATH" ${{ env.RELEASE_BASENAME }}/bin/agave-install-init-${{ env.TARGET }}.exe

          echo "Creating tarball..."
          tar -cjf ${{ env.TARBALL_BASENAME }}-${{ env.TARGET }}.tar.bz2 ${{ env.RELEASE_BASENAME }}

          TARBALL_PATH="${{ env.TARBALL_BASENAME }}-${{ env.TARGET }}.tar.bz2"
          if [ ! -f "$TARBALL_PATH" ]; then
            echo "Tarball $TARBALL_PATH is missing! Exiting."
            exit 1
          fi

      # Fetch Latest Release
      - name: Fetch Latest Release
        id: get_latest_release
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/releases/latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Extract Upload URL
      - name: Extract Upload URL
        shell: bash
        run: |
          UPLOAD_URL=$(echo '${{ steps.get_latest_release.outputs.data }}' | jq -r '.upload_url' | sed 's/{?name,label}//')
          if [ -z "$UPLOAD_URL" ]; then 
            echo "Failed to fetch upload URL"; 
            exit 1; 
          fi
          echo "UPLOAD_URL=${UPLOAD_URL}" >> $GITHUB_ENV

      # Verify Files Before Upload
      - name: Verify Files
        run: |
          ls -lh ${{ env.TARBALL_BASENAME }}-${{ env.TARGET }}.tar.bz2 || { echo "Tarball missing!"; exit 1; }
          ls -lh ${{ env.RELEASE_BASENAME }}/version.yml || { echo "Version file missing!"; exit 1; }
          ls -lh ${{ env.RELEASE_BASENAME }}/bin/agave-install-init-${{ env.TARGET }}.exe || { echo "Binary file missing!"; exit 1; }

      # Upload Build Artifacts
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: windows-artifacts
          path: |
            ${{ env.TARBALL_BASENAME }}-${{ env.TARGET }}.tar.bz2
            ${{ env.RELEASE_BASENAME }}/version.yml
            ${{ env.RELEASE_BASENAME }}/bin/agave-install-init-${{ env.TARGET }}.exe

      # Upload Release Tarball
      - name: Upload Release Tarball
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ${{ env.TARBALL_BASENAME }}-${{ env.TARGET }}.tar.bz2
          asset_name: ${{ env.TARBALL_BASENAME }}-${{ env.TARGET }}.tar.bz2
          asset_content_type: application/x-bzip2
