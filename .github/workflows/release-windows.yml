name: Windows Release Artifacts

on:
  push:
    branches:
      - release/*
      - v*-mod
  workflow_dispatch:

jobs:
  windows-build:
    runs-on: windows-2022
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0
          submodules: recursive

      - name: Setup Rust
        shell: bash
        run: |
          rustup install stable
          rustup default stable

      - name: Prepare Environment
        shell: bash
        run: |
          # Set up environment variables
          export RELEASE_BASENAME=solana-release
          export TARBALL_BASENAME=$RELEASE_BASENAME
          export CI_OS_NAME=windows
          export TARGET=x86_64-pc-windows-msvc
          export CHANNEL_OR_TAG=${{ github.ref_name }}
          echo "COMMIT=$(git rev-parse HEAD)" >> $GITHUB_ENV

      - name: Install Dependencies
        run: |
          choco install protoc
          vcpkg install openssl:x64-windows-static-md
          vcpkg integrate install

      - name: Build Project
        shell: bash
        run: |
          # Ensure necessary environment variables
          mkdir -p $RELEASE_BASENAME
          echo "channel: $CHANNEL_OR_TAG" > $RELEASE_BASENAME/version.yml
          echo "commit: $COMMIT" >> $RELEASE_BASENAME/version.yml
          echo "target: $TARGET" >> $RELEASE_BASENAME/version.yml

          # Build binaries
          cargo build --release

          # Copy binaries to release directory
          mkdir -p $RELEASE_BASENAME/bin
          cp target/release/agave-install-init $RELEASE_BASENAME/bin/agave-install-init-$TARGET

          # Create tarball
          tar -cvf $TARBALL_BASENAME-$TARGET.tar $RELEASE_BASENAME
          bzip2 $TARBALL_BASENAME-$TARGET.tar

      - name: Fetch Latest Release
        id: get_latest_release
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/releases/latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Upload URL
        run: |
          UPLOAD_URL=$(echo '${{ steps.get_latest_release.outputs.data }}' | jq -r '.upload_url' | sed 's/{?name,label}//')
          echo "UPLOAD_URL=${UPLOAD_URL}" >> $GITHUB_ENV

      - name: Upload Windows Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: $TARBALL_BASENAME-${{ env.TARGET }}.tar.bz2
          asset_name: $TARBALL_BASENAME-${{ env.TARGET }}.tar.bz2
          asset_content_type: application/x-bzip2