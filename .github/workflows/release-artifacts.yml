name: Build and Publish Artifacts

on:
  push:
    branches:
      - release/*
      - v*-mod
  workflow_dispatch:

jobs:
  build-and-publish:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    env:
      RELEASE_BASENAME: solana-release
      TARBALL_BASENAME: solana-release
      SOLANA_DOWNLOAD_ROOT: https://github.com/gabrielhicks/jito-solana/releases/download

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: 'recursive'

      - name: Install System Dependencies
        shell: bash
        run: |
          case $RUNNER_OS in
          Linux)
            sudo apt-get update
            sudo apt-get install -y \
              libssl-dev \
              libudev-dev \
              pkg-config \
              zlib1g-dev \
              llvm \
              clang \
              cmake \
              make \
              libprotobuf-dev \
              protobuf-compiler
            ;;
          macOS)
            brew update
            brew install \
              openssl \
              pkg-config \
              zlib \
              llvm \
              cmake \
              make \
              protobuf
            ;;
          *)
            echo "Unsupported OS: $RUNNER_OS"
            exit 1
            ;;
          esac

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Determine Build Target
        id: determine-target
        shell: bash
        run: |
          case $RUNNER_OS in
          Linux)
            echo "target=x86_64-unknown-linux-gnu" >> $GITHUB_ENV
            ;;
          macOS)
            cputype=$(uname -m)
            if [[ $cputype == "arm64" ]]; then
              cputype=aarch64
            fi
            echo "target=${cputype}-apple-darwin" >> $GITHUB_ENV
            ;;
          *)
            echo "Unsupported OS: $RUNNER_OS"
            exit 1
            ;;
          esac
          target=$(grep 'target=' $GITHUB_ENV | cut -d '=' -f 2)
          echo "Determined target: $target"

      - name: Build Project
        shell: bash
        run: |
          mkdir -p $RELEASE_BASENAME
          echo "channel: ${{ github.ref_name }}" > $RELEASE_BASENAME/version.yml
          echo "commit: $(git rev-parse HEAD)" >> $RELEASE_BASENAME/version.yml
          echo "target: ${{ env.target }}" >> $RELEASE_BASENAME/version.yml

          # Build release binaries
          cargo build --release

          # Copy binaries to the release directory
          mkdir -p $RELEASE_BASENAME/bin
          cp target/release/agave-install-init $RELEASE_BASENAME/bin/agave-install-init-${{ env.target }}

          # Create solana-release tarball
          tar cvf $TARBALL_BASENAME-${{ env.target }}.tar $RELEASE_BASENAME
          bzip2 $TARBALL_BASENAME-${{ env.target }}.tar

      - name: Package SBF SDK (Linux Only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p sdk/sbf
          echo "Packaging SBF SDK..."
          # Add your logic to build or package the SBF SDK
          tar cvjf sbf-sdk.tar.bz2 -C sdk sbf

      - name: Fetch Latest Release
        id: get_latest_release
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/releases/latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Upload URL
        run: |
          UPLOAD_URL=$(echo '${{ steps.get_latest_release.outputs.data }}' | jq -r '.upload_url' | sed 's/{?name,label}//')
          echo "UPLOAD_URL=${UPLOAD_URL}" >> $GITHUB_ENV

      - name: Upload Artifacts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: $TARBALL_BASENAME-${{ env.target }}.tar.bz2
          asset_name: $TARBALL_BASENAME-${{ env.target }}.tar.bz2
          asset_content_type: application/x-bzip2

      - name: Upload SBF SDK (Linux Only)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: sbf-sdk.tar.bz2
          asset_name: sbf-sdk.tar.bz2
          asset_content_type: application/x-bzip2
