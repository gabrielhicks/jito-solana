name: Build and Publish Mac Artifacts

on:
  push:
    branches:
      - release/*
      - v*-mod
  workflow_dispatch:

jobs:
  build-mac:
    runs-on: macos-latest

    env:
      RELEASE_BASENAME: solana-release
      TARBALL_BASENAME: solana-release
      SOLANA_DOWNLOAD_ROOT: https://github.com/gabrielhicks/jito-solana/releases/download

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Install System Dependencies
        run: |
          brew update
          brew install openssl pkg-config zlib llvm cmake make protobuf jq
          # Verify required tools
          for tool in cargo tar bzip2 jq; do
            if ! command -v $tool >/dev/null; then
              echo "$tool is missing! Exiting."
              exit 1
            fi
          done

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Verify Rust Installation
        run: |
          rustc --version || { echo "Rust is not installed!"; exit 1; }
          cargo --version || { echo "Cargo is not installed!"; exit 1; }

      - name: Determine Build Target
        run: |
          echo "target=arm64-apple-darwin" >> $GITHUB_ENV
          echo "Build target: ${{ env.target }}"

      - name: Build Project
        run: |
          mkdir -p ${{ env.RELEASE_BASENAME }}
          echo "channel: ${{ github.ref_name }}" > ${{ env.RELEASE_BASENAME }}/version.yml
          echo "commit: $(git rev-parse HEAD)" >> ${{ env.RELEASE_BASENAME }}/version.yml
          echo "target: ${{ env.target }}" >> ${{ env.RELEASE_BASENAME }}/version.yml

          echo "Building project with cargo..."
          cargo build --release || { echo "Cargo build failed!"; exit 1; }

          BINARY_PATH="target/release/agave-install-init"
          if [ ! -f "$BINARY_PATH" ]; then
            echo "Build artifact $BINARY_PATH is missing!"
            exit 1
          fi

          echo "Copying binary to release directory..."
          mkdir -p ${{ env.RELEASE_BASENAME }}/bin
          cp "$BINARY_PATH" ${{ env.RELEASE_BASENAME }}/bin/agave-install-init-${{ env.target }}

          echo "Creating tarball..."
          tar -cvf ${{ env.TARBALL_BASENAME }}-${{ env.target }}.tar ${{ env.RELEASE_BASENAME }}
          bzip2 ${{ env.TARBALL_BASENAME }}-${{ env.target }}.tar

      - name: Fetch Latest Release
        id: get_latest_release
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/releases/tags/${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Upload URL
        run: |
          UPLOAD_URL=$(echo '${{ steps.get_latest_release.outputs.data }}' | jq -r '.upload_url' | sed 's/{?name,label}//')
          echo "UPLOAD_URL=${UPLOAD_URL}" >> $GITHUB_ENV
          if [ -z "$UPLOAD_URL" ]; then
            echo "Failed to retrieve upload URL!"
            exit 1
          fi

      - name: Verify Files Before Upload
        run: |
          for file in ${{ env.TARBALL_BASENAME }}-${{ env.target }}.tar.bz2 \
                      ${{ env.RELEASE_BASENAME }}/version.yml \
                      ${{ env.RELEASE_BASENAME }}/bin/agave-install-init-${{ env.target }}; do
            if [ ! -f "$file" ]; then
              echo "File $file is missing!"
              exit 1
            fi
          done

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts-mac
          path: |
            ${{ env.TARBALL_BASENAME }}-${{ env.target }}.tar.bz2
            ${{ env.RELEASE_BASENAME }}/version.yml
            ${{ env.RELEASE_BASENAME }}/bin/agave-install-init-${{ env.target }}

      - name: Upload Release Tarball
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ${{ env.TARBALL_BASENAME }}-${{ env.target }}.tar.bz2
          asset_name: ${{ env.TARBALL_BASENAME }}-${{ env.target }}.tar.bz2
          asset_content_type: application/x-bzip2

      - name: Upload Binary File
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ${{ env.RELEASE_BASENAME }}/bin/agave-install-init-${{ env.target }}
          asset_name: agave-install-init-${{ env.target }}
          asset_content_type: application/octet-stream